//Patrick Whetsel
//CSCI 2421 Fall 2013
//bag.cpp
//bag template class definition from textbook

#include <cassert>  // Provides assert 
#include <cstdlib>  // Provides NULL, rand, size_t 
using namespace std; 
  
  
	template<typename value_type>
    bag<value_type>::bag( ) 
    // Library facilities used: cstdlib 
    { 
    head_ptr = NULL; 
    many_nodes = 0; 
    } 
  
    template<typename value_type>
    bag<value_type>::bag(const bag& source) 
    // Library facilities used: node1.h 
    { 
        node<value_type> *tail_ptr;  // Needed for argument of list_copy 
  
        list_copy(source.head_ptr, head_ptr, tail_ptr); 
        many_nodes = source.many_nodes; 
    } 
  
    template<typename value_type>
    bag<value_type>::~bag( ) 
    // Library facilities used: node1.h 
    { 
        list_clear(head_ptr); 
        many_nodes = 0; 
    } 
  
    template<typename value_type>
    typename bag<value_type>::size_type bag<value_type>::count(const value_type& target) const
    // Library facilities used: cstdlib, node1.h 
    { 
    size_type answer; 
    const node<value_type> *cursor; // Use const node* since we don't change the nodes. 
  
    answer = 0; 
    cursor = list_search(head_ptr, target); 
    while (cursor != NULL) 
    { 
        // Each time that cursor is not NULL, we have another occurrence of 
        // target, so we add one to answer, and move cursor to the next 
        // occurrence of the target. 
        ++answer; 
        cursor = cursor->link( ); 
        cursor = list_search(cursor, target); 
    } 
    return answer; 
    } 
  
    template<typename value_type>
    typename bag<value_type>::size_type bag<value_type>::erase(const value_type& target) 
    // Library facilities used: cstdlib, node1.h 
    { 
        size_type answer = 0; 
        node<value_type> *target_ptr; 
  
        target_ptr = list_search(head_ptr, target); 
        while (target_ptr != NULL) 
        { 
            // Each time that target_ptr is not NULL, we have another occurrence 
        // of target. We remove this target using the same technique that 
        // was used in erase_one. 
            target_ptr->set_data( head_ptr->data( ) ); 
            target_ptr = target_ptr->link( ); 
            target_ptr = list_search(target_ptr, target); 
            list_head_remove(head_ptr); 
        --many_nodes; 
            ++answer; 
        } 
        return answer; 
    } 
  
    template<typename value_type>
    bool bag<value_type>::erase_one(const value_type& target) 
    // Library facilities used: cstdlib, node1.h 
    { 
    node<value_type> *target_ptr; 
  
    target_ptr = list_search(head_ptr, target); 
    if (target_ptr == NULL) 
        return false; // target isn't in the bag, so no work to do 
    target_ptr->set_data( head_ptr->data( ) ); 
    list_head_remove(head_ptr); 
    --many_nodes; 
    return true; 
    } 
  
    template<typename value_type>
    value_type bag<value_type>::grab( ) const
    // Library facilities used: cassert, cstdlib, node1.h 
    { 
    size_type i; 
    const node<value_type> *cursor; // Use const node* since we don't change the nodes. 
  
    assert(size( ) > 0); 
    i = (rand( ) % size( )) + 1; 
    cursor = list_locate(head_ptr, i); 
    return cursor->data( ); 
    } 
  
    template<typename value_type>
    void bag<value_type>::insert(const value_type& entry) 
    // Library facilities used: node1.h 
    { 
    list_head_insert(head_ptr, entry); 
    ++many_nodes; 
    } 
  
    template<typename value_type>
    void bag<value_type>::operator +=(const bag& addend) 
    // Library facilities used: cstdlib, node1.h 
    { 
    node<value_type> *copy_head_ptr; 
    node<value_type> *copy_tail_ptr; 
  
    if (addend.many_nodes > 0) 
    { 
        list_copy(addend.head_ptr, copy_head_ptr, copy_tail_ptr); 
        copy_tail_ptr->set_link( head_ptr ); 
        head_ptr = copy_head_ptr; 
        many_nodes += addend.many_nodes; 
    } 
    } 
  
    template<typename value_type>
    void bag<value_type>::operator = (const bag& source) 
    // Library facilities used: node1.h 
    { 
    node<value_type> *tail_ptr; // Needed for argument to list_copy 
  
    if (this == &source) 
            return; 
  
    list_clear(head_ptr); 
    many_nodes = 0; 
    list_copy(source.head_ptr, head_ptr, tail_ptr); 
    many_nodes = source.many_nodes; 
    } 
  
	template<typename value_type>
    bag<value_type> operator +(const bag<value_type>& b1, const bag<value_type>& b2) 
    { 
    bag<value_type> answer; 
  
    answer += b1; 
    answer += b2; 
    return answer; 
    } 